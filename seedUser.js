/**
 * seedUser.js
 * 
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (seed) –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ MongoDB.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ –∂–µ –º–æ–¥–µ–ª–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ –∏ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä.
 * 
 * –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω NODE_ENV=MONGO_URI,
 * –ª–∏–±–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ–∞–π–ª .env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π MONGO_URI, —É–∫–∞–∑—ã–≤–∞—é—â–µ–π –Ω–∞ –≤–∞—à—É Atlas-–±–∞–∑—É.
 */

import mongoose from 'mongoose';
import dotenv from 'dotenv';
import bcrypt from 'bcrypt';

// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ User (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ seedUser.js)
import { User } from './src/models/User.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env (–≥–¥–µ —É –≤–∞—Å –ø—Ä–æ–ø–∏—Å–∞–Ω–æ MONGO_URI)
dotenv.config();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ MONGO_URI –≥–¥–µ-—Ç–æ –µ—Å—Ç—å
const uri = process.env.MONGO_URI;
if (!uri) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è MONGO_URI.');
  console.error('   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –±—ç–∫–µ–Ω–¥–∞ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:');
  console.error('     MONGO_URI=<–≤–∞—à MongoDB connection string>');
  process.exit(1);
}

async function main() {
  try {
    // 1) –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    await mongoose.connect(uri, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ MongoDB');

    // 2) –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ)
    const email = 'admin@example.com';   // <-- –∑–¥–µ—Å—å –ø–æ–º–µ–Ω—è–π—Ç–µ e-mail
    const name = '–ê–¥–º–∏–Ω –¢–µ—Å—Ç–æ–≤—ã–π';       // <-- –∑–¥–µ—Å—å –∏–º—è
    const passwordPlain = '123'; // <-- –∑–¥–µ—Å—å –ø–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
    const role = 'admin';                // <-- —Ä–æ–ª—å: "admin" –∏–ª–∏ "employee"

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º e-mail
    const exists = await User.findOne({ email });
    if (exists) {
      console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email="${email}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: ${exists._id}).`);
    } else {
      // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const hash = await bcrypt.hash(passwordPlain, 10);

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser = await User.create({
        name,
        email,
        password: hash,
        role,            // –±—É–¥–µ—Ç "admin"
      });
      console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:');
      console.log(`   ID:    ${newUser._id}`);
      console.log(`   Name:  ${newUser.name}`);
      console.log(`   Email: ${newUser.email}`);
      console.log(`   Role:  ${newUser.role}`);
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
    await mongoose.disconnect();
    console.log('üîí –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç MongoDB. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.');
    process.exit(0);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    await mongoose.disconnect();
    process.exit(1);
  }
}

main();
